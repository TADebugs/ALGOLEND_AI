{
    "hints": {
        "createApplication(address,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "deposit(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "borrow(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "repay()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPoolStats()(uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getUserPosition()(uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 3
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 3
        }
    },
    "schema": {
        "global": {
            "declared": {
                "interestRate": {
                    "type": "uint64",
                    "key": "interestRate"
                },
                "poolOwner": {
                    "type": "bytes",
                    "key": "poolOwner"
                },
                "totalBorrowed": {
                    "type": "uint64",
                    "key": "totalBorrowed"
                },
                "totalDeposits": {
                    "type": "uint64",
                    "key": "totalDeposits"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "lastUpdateTime": {
                    "type": "uint64",
                    "key": "lastUpdateTime"
                },
                "userBorrowed": {
                    "type": "uint64",
                    "key": "userBorrowed"
                },
                "userDeposits": {
                    "type": "uint64",
                    "key": "userDeposits"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "LendingPool",
        "methods": [
            {
                "name": "createApplication",
                "args": [
                    {
                        "type": "address",
                        "name": "owner"
                    },
                    {
                        "type": "uint64",
                        "name": "initialRate"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Initialize the lending pool"
            },
            {
                "name": "deposit",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Deposit ALGO into the lending pool"
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Withdraw ALGO from the lending pool"
            },
            {
                "name": "borrow",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Borrow ALGO from the lending pool"
            },
            {
                "name": "repay",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Repay borrowed ALGO"
            },
            {
                "name": "getPoolStats",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64)"
                },
                "desc": "Get pool statistics"
            },
            {
                "name": "getUserPosition",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64)"
                },
                "desc": "Get user position"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}