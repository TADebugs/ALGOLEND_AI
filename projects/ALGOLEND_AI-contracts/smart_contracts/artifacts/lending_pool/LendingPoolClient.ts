/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"LendingPool","structs":{},"methods":[{"name":"createApplication","args":[{"type":"address","name":"owner"},{"type":"uint64","name":"initialRate"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"desc":"Initialize the lending pool","events":[],"recommendations":{}},{"name":"deposit","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Deposit ALGO into the lending pool","events":[],"recommendations":{}},{"name":"withdraw","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Withdraw ALGO from the lending pool","events":[],"recommendations":{}},{"name":"borrow","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Borrow ALGO from the lending pool","events":[],"recommendations":{}},{"name":"repay","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Repay borrowed ALGO","events":[],"recommendations":{}},{"name":"getPoolStats","args":[],"returns":{"type":"(uint64,uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get pool statistics","events":[],"recommendations":{}},{"name":"getUserPosition","args":[],"returns":{"type":"(uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get user position","events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":3,"bytes":1},"local":{"ints":3,"bytes":0}},"keys":{"global":{"totalDeposits":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxEZXBvc2l0cw=="},"totalBorrowed":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxCb3Jyb3dlZA=="},"interestRate":{"keyType":"AVMString","valueType":"AVMUint64","key":"aW50ZXJlc3RSYXRl"},"poolOwner":{"keyType":"AVMString","valueType":"address","key":"cG9vbE93bmVy"}},"local":{"userDeposits":{"keyType":"AVMString","valueType":"AVMUint64","key":"dXNlckRlcG9zaXRz"},"userBorrowed":{"keyType":"AVMString","valueType":"AVMUint64","key":"dXNlckJvcnJvd2Vk"},"lastUpdateTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdFVwZGF0ZVRpbWU="}},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[160,191,230,242,258,274,290],"errorMessage":"OnCompletion is not NoOp"},{"pc":[294],"errorMessage":"can only call when creating"},{"pc":[163,194,233,245,261,277],"errorMessage":"can only call when not creating"},{"pc":[366,427,469,473,505,576,599,618,625,633,638,642,647],"errorMessage":"check GlobalState exists"},{"pc":[347,385,397,404,414,485,535,544,552,563,660,667,673],"errorMessage":"check LocalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAEmBw10b3RhbERlcG9zaXRzDXRvdGFsQm9ycm93ZWQMdXNlckRlcG9zaXRzDmxhc3RVcGRhdGVUaW1lDHVzZXJCb3Jyb3dlZAxpbnRlcmVzdFJhdGUEFR98dTEbQQA4ggcEzRnxpgRuLrybBCHx3f8E29e53QRLzAmOBFh3vbEEjO6iFDYaAI4HAIQAdABkAFQASAAhAAIiQzEZFEQxGESIAehPAhZPAhZPAhZOAlBMUCcGTFCwI0MxGRREMRhEiAGhTwMWTwMWTwMWTwMWTwNPA1BPAlBMUCcGTFCwI0MxGRREMRhEiAEkI0MxGRREMRhENhoBF4gAzyNDMRkURDEYRDYaAReIAGkjQzEZFEQxGEQ2GgEXiAAzI0MxGRREMRgURDYaATYaAheIAAIjQ4oCAIAJcG9vbE93bmVyi/5nJwWL/2coImcpImeJigEAi/9EMQAiKmNEMQBMi/8IKkxmMQArMgdmIihlRIv/CChMZ4mKAQCL/0QxACIqY0SL/w9EMgcxACIrY0QJMQAiKmNETIgAtzEAIipjRDEATIv/CSpMZiIoZUSL/wkoTGcxACsyB2axMQCL/08CCLIIsgcjshAisgGziYoBAIv/RCIoZUQiKWVEi/8ID0QxACInBGNEMQBMi/8IJwRMZjEAKzIHZiIpZUSL/wgpTGexMQCL/7IIsgcjshAisgGziTEAIicEY0REMgcxACIrY0QJMQAiJwRjREyIACMxACInBGNESwEIMQAnBCJmIillRExPAgkJKUxnMQArMgdmiYoCASInBWVEi/4Li/8LgYDwrueWCQqJIihlREEAHSIpZUSBkE4LIihlRAoiKGVEIillRCInBWVETwOJIkL/7DEAIipjRDEAIicEY0QxACIrY0SJ","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the LendingPool contract
 */
export type LendingPoolArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(address,uint64)void': {
      owner: string
      initialRate: bigint | number
    }
    'deposit(uint64)void': {
      amount: bigint | number
    }
    'withdraw(uint64)void': {
      amount: bigint | number
    }
    'borrow(uint64)void': {
      amount: bigint | number
    }
    'repay()void': Record<string, never>
    'getPoolStats()(uint64,uint64,uint64,uint64)': Record<string, never>
    'getUserPosition()(uint64,uint64,uint64)': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(address,uint64)void': [owner: string, initialRate: bigint | number]
    'deposit(uint64)void': [amount: bigint | number]
    'withdraw(uint64)void': [amount: bigint | number]
    'borrow(uint64)void': [amount: bigint | number]
    'repay()void': []
    'getPoolStats()(uint64,uint64,uint64,uint64)': []
    'getUserPosition()(uint64,uint64,uint64)': []
  }
}

/**
 * The return type for each method
 */
export type LendingPoolReturns = {
  'createApplication(address,uint64)void': void
  'deposit(uint64)void': void
  'withdraw(uint64)void': void
  'borrow(uint64)void': void
  'repay()void': void
  'getPoolStats()(uint64,uint64,uint64,uint64)': [bigint, bigint, bigint, bigint]
  'getUserPosition()(uint64,uint64,uint64)': [bigint, bigint, bigint]
}

/**
 * Defines the types of available calls and state of the LendingPool smart contract.
 */
export type LendingPoolTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(address,uint64)void' | 'createApplication', {
      argsObj: LendingPoolArgs['obj']['createApplication(address,uint64)void']
      argsTuple: LendingPoolArgs['tuple']['createApplication(address,uint64)void']
      returns: LendingPoolReturns['createApplication(address,uint64)void']
    }>
    & Record<'deposit(uint64)void' | 'deposit', {
      argsObj: LendingPoolArgs['obj']['deposit(uint64)void']
      argsTuple: LendingPoolArgs['tuple']['deposit(uint64)void']
      returns: LendingPoolReturns['deposit(uint64)void']
    }>
    & Record<'withdraw(uint64)void' | 'withdraw', {
      argsObj: LendingPoolArgs['obj']['withdraw(uint64)void']
      argsTuple: LendingPoolArgs['tuple']['withdraw(uint64)void']
      returns: LendingPoolReturns['withdraw(uint64)void']
    }>
    & Record<'borrow(uint64)void' | 'borrow', {
      argsObj: LendingPoolArgs['obj']['borrow(uint64)void']
      argsTuple: LendingPoolArgs['tuple']['borrow(uint64)void']
      returns: LendingPoolReturns['borrow(uint64)void']
    }>
    & Record<'repay()void' | 'repay', {
      argsObj: LendingPoolArgs['obj']['repay()void']
      argsTuple: LendingPoolArgs['tuple']['repay()void']
      returns: LendingPoolReturns['repay()void']
    }>
    & Record<'getPoolStats()(uint64,uint64,uint64,uint64)' | 'getPoolStats', {
      argsObj: LendingPoolArgs['obj']['getPoolStats()(uint64,uint64,uint64,uint64)']
      argsTuple: LendingPoolArgs['tuple']['getPoolStats()(uint64,uint64,uint64,uint64)']
      returns: LendingPoolReturns['getPoolStats()(uint64,uint64,uint64,uint64)']
    }>
    & Record<'getUserPosition()(uint64,uint64,uint64)' | 'getUserPosition', {
      argsObj: LendingPoolArgs['obj']['getUserPosition()(uint64,uint64,uint64)']
      argsTuple: LendingPoolArgs['tuple']['getUserPosition()(uint64,uint64,uint64)']
      returns: LendingPoolReturns['getUserPosition()(uint64,uint64,uint64)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        totalDeposits: bigint
        totalBorrowed: bigint
        interestRate: bigint
        poolOwner: string
      }
      maps: {}
    }
    local: {
      keys: {
        userDeposits: bigint
        userBorrowed: bigint
        lastUpdateTime: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type LendingPoolSignatures = keyof LendingPoolTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type LendingPoolNonVoidMethodSignatures = keyof LendingPoolTypes['methods'] extends infer T ? T extends keyof LendingPoolTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the LendingPool smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends LendingPoolSignatures> = LendingPoolTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the LendingPool smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LendingPoolSignatures> = LendingPoolTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = LendingPoolTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed local state of the application.
 */
export type LocalKeysState = LendingPoolTypes['state']['local']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type LendingPoolCreateCallParams =
  | Expand<CallParams<LendingPoolArgs['obj']['createApplication(address,uint64)void'] | LendingPoolArgs['tuple']['createApplication(address,uint64)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<LendingPoolArgs['obj']['createApplication(address,uint64)void'] | LendingPoolArgs['tuple']['createApplication(address,uint64)void']> & {method: 'createApplication(address,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type LendingPoolDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: LendingPoolCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the LendingPool smart contract
 */
export abstract class LendingPoolParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends LendingPoolCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(address,uint64)void':
            return LendingPoolParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the LendingPool smart contract using the createApplication(address,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<LendingPoolArgs['obj']['createApplication(address,uint64)void'] | LendingPoolArgs['tuple']['createApplication(address,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(address,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.owner, params.args.initialRate],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the deposit(uint64)void ABI method
   *
   * Deposit ALGO into the lending pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deposit(params: CallParams<LendingPoolArgs['obj']['deposit(uint64)void'] | LendingPoolArgs['tuple']['deposit(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deposit(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the withdraw(uint64)void ABI method
   *
   * Withdraw ALGO from the lending pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdraw(params: CallParams<LendingPoolArgs['obj']['withdraw(uint64)void'] | LendingPoolArgs['tuple']['withdraw(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the borrow(uint64)void ABI method
   *
   * Borrow ALGO from the lending pool
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static borrow(params: CallParams<LendingPoolArgs['obj']['borrow(uint64)void'] | LendingPoolArgs['tuple']['borrow(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'borrow(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the repay()void ABI method
   *
   * Repay borrowed ALGO
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static repay(params: CallParams<LendingPoolArgs['obj']['repay()void'] | LendingPoolArgs['tuple']['repay()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'repay()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getPoolStats()(uint64,uint64,uint64,uint64) ABI method
   *
   * Get pool statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolStats(params: CallParams<LendingPoolArgs['obj']['getPoolStats()(uint64,uint64,uint64,uint64)'] | LendingPoolArgs['tuple']['getPoolStats()(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolStats()(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getUserPosition()(uint64,uint64,uint64) ABI method
   *
   * Get user position
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserPosition(params: CallParams<LendingPoolArgs['obj']['getUserPosition()(uint64,uint64,uint64)'] | LendingPoolArgs['tuple']['getUserPosition()(uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserPosition()(uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the LendingPool smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class LendingPoolFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `LendingPoolFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new LendingPoolClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new LendingPoolClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the LendingPool smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: LendingPoolDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? LendingPoolParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (LendingPoolCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new LendingPoolClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LendingPool smart contract using the createApplication(address,uint64)void ABI method.
       *
       * Initialize the lending pool
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<LendingPoolArgs['obj']['createApplication(address,uint64)void'] | LendingPoolArgs['tuple']['createApplication(address,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(LendingPoolParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LendingPool smart contract using the createApplication(address,uint64)void ABI method.
       *
       * Initialize the lending pool
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<LendingPoolArgs['obj']['createApplication(address,uint64)void'] | LendingPoolArgs['tuple']['createApplication(address,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(LendingPoolParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LendingPool smart contract using an ABI method call using the createApplication(address,uint64)void ABI method.
       *
       * Initialize the lending pool
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<LendingPoolArgs['obj']['createApplication(address,uint64)void'] | LendingPoolArgs['tuple']['createApplication(address,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(LendingPoolParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | LendingPoolReturns['createApplication(address,uint64)void']) }, appClient: new LendingPoolClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the LendingPool smart contract
 */
export class LendingPoolClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `LendingPoolClient`
   *
   * @param appClient An `AppClient` instance which has been created with the LendingPool app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `LendingPoolClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends LendingPoolNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `LendingPoolClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<LendingPoolClient> {
    return new LendingPoolClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `LendingPoolClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<LendingPoolClient> {
    return new LendingPoolClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the LendingPool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the LendingPool smart contract using the `deposit(uint64)void` ABI method.
     *
     * Deposit ALGO into the lending pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deposit: (params: CallParams<LendingPoolArgs['obj']['deposit(uint64)void'] | LendingPoolArgs['tuple']['deposit(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LendingPoolParamsFactory.deposit(params))
    },

    /**
     * Makes a call to the LendingPool smart contract using the `withdraw(uint64)void` ABI method.
     *
     * Withdraw ALGO from the lending pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdraw: (params: CallParams<LendingPoolArgs['obj']['withdraw(uint64)void'] | LendingPoolArgs['tuple']['withdraw(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LendingPoolParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the LendingPool smart contract using the `borrow(uint64)void` ABI method.
     *
     * Borrow ALGO from the lending pool
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    borrow: (params: CallParams<LendingPoolArgs['obj']['borrow(uint64)void'] | LendingPoolArgs['tuple']['borrow(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LendingPoolParamsFactory.borrow(params))
    },

    /**
     * Makes a call to the LendingPool smart contract using the `repay()void` ABI method.
     *
     * Repay borrowed ALGO
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    repay: (params: CallParams<LendingPoolArgs['obj']['repay()void'] | LendingPoolArgs['tuple']['repay()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(LendingPoolParamsFactory.repay(params))
    },

    /**
     * Makes a call to the LendingPool smart contract using the `getPoolStats()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * Get pool statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolStats: (params: CallParams<LendingPoolArgs['obj']['getPoolStats()(uint64,uint64,uint64,uint64)'] | LendingPoolArgs['tuple']['getPoolStats()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(LendingPoolParamsFactory.getPoolStats(params))
    },

    /**
     * Makes a call to the LendingPool smart contract using the `getUserPosition()(uint64,uint64,uint64)` ABI method.
     *
     * Get user position
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserPosition: (params: CallParams<LendingPoolArgs['obj']['getUserPosition()(uint64,uint64,uint64)'] | LendingPoolArgs['tuple']['getUserPosition()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(LendingPoolParamsFactory.getUserPosition(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the LendingPool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the LendingPool smart contract using the `deposit(uint64)void` ABI method.
     *
     * Deposit ALGO into the lending pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deposit: (params: CallParams<LendingPoolArgs['obj']['deposit(uint64)void'] | LendingPoolArgs['tuple']['deposit(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LendingPoolParamsFactory.deposit(params))
    },

    /**
     * Makes a call to the LendingPool smart contract using the `withdraw(uint64)void` ABI method.
     *
     * Withdraw ALGO from the lending pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdraw: (params: CallParams<LendingPoolArgs['obj']['withdraw(uint64)void'] | LendingPoolArgs['tuple']['withdraw(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LendingPoolParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the LendingPool smart contract using the `borrow(uint64)void` ABI method.
     *
     * Borrow ALGO from the lending pool
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    borrow: (params: CallParams<LendingPoolArgs['obj']['borrow(uint64)void'] | LendingPoolArgs['tuple']['borrow(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LendingPoolParamsFactory.borrow(params))
    },

    /**
     * Makes a call to the LendingPool smart contract using the `repay()void` ABI method.
     *
     * Repay borrowed ALGO
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    repay: (params: CallParams<LendingPoolArgs['obj']['repay()void'] | LendingPoolArgs['tuple']['repay()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(LendingPoolParamsFactory.repay(params))
    },

    /**
     * Makes a call to the LendingPool smart contract using the `getPoolStats()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * Get pool statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolStats: (params: CallParams<LendingPoolArgs['obj']['getPoolStats()(uint64,uint64,uint64,uint64)'] | LendingPoolArgs['tuple']['getPoolStats()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(LendingPoolParamsFactory.getPoolStats(params))
    },

    /**
     * Makes a call to the LendingPool smart contract using the `getUserPosition()(uint64,uint64,uint64)` ABI method.
     *
     * Get user position
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserPosition: (params: CallParams<LendingPoolArgs['obj']['getUserPosition()(uint64,uint64,uint64)'] | LendingPoolArgs['tuple']['getUserPosition()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(LendingPoolParamsFactory.getUserPosition(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the LendingPool smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the LendingPool smart contract using the `deposit(uint64)void` ABI method.
     *
     * Deposit ALGO into the lending pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deposit: async (params: CallParams<LendingPoolArgs['obj']['deposit(uint64)void'] | LendingPoolArgs['tuple']['deposit(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LendingPoolParamsFactory.deposit(params))
      return {...result, return: result.return as unknown as (undefined | LendingPoolReturns['deposit(uint64)void'])}
    },

    /**
     * Makes a call to the LendingPool smart contract using the `withdraw(uint64)void` ABI method.
     *
     * Withdraw ALGO from the lending pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdraw: async (params: CallParams<LendingPoolArgs['obj']['withdraw(uint64)void'] | LendingPoolArgs['tuple']['withdraw(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LendingPoolParamsFactory.withdraw(params))
      return {...result, return: result.return as unknown as (undefined | LendingPoolReturns['withdraw(uint64)void'])}
    },

    /**
     * Makes a call to the LendingPool smart contract using the `borrow(uint64)void` ABI method.
     *
     * Borrow ALGO from the lending pool
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    borrow: async (params: CallParams<LendingPoolArgs['obj']['borrow(uint64)void'] | LendingPoolArgs['tuple']['borrow(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LendingPoolParamsFactory.borrow(params))
      return {...result, return: result.return as unknown as (undefined | LendingPoolReturns['borrow(uint64)void'])}
    },

    /**
     * Makes a call to the LendingPool smart contract using the `repay()void` ABI method.
     *
     * Repay borrowed ALGO
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    repay: async (params: CallParams<LendingPoolArgs['obj']['repay()void'] | LendingPoolArgs['tuple']['repay()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(LendingPoolParamsFactory.repay(params))
      return {...result, return: result.return as unknown as (undefined | LendingPoolReturns['repay()void'])}
    },

    /**
     * Makes a call to the LendingPool smart contract using the `getPoolStats()(uint64,uint64,uint64,uint64)` ABI method.
     *
     * Get pool statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolStats: async (params: CallParams<LendingPoolArgs['obj']['getPoolStats()(uint64,uint64,uint64,uint64)'] | LendingPoolArgs['tuple']['getPoolStats()(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(LendingPoolParamsFactory.getPoolStats(params))
      return {...result, return: result.return as unknown as (undefined | LendingPoolReturns['getPoolStats()(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the LendingPool smart contract using the `getUserPosition()(uint64,uint64,uint64)` ABI method.
     *
     * Get user position
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserPosition: async (params: CallParams<LendingPoolArgs['obj']['getUserPosition()(uint64,uint64,uint64)'] | LendingPoolArgs['tuple']['getUserPosition()(uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(LendingPoolParamsFactory.getUserPosition(params))
      return {...result, return: result.return as unknown as (undefined | LendingPoolReturns['getUserPosition()(uint64,uint64,uint64)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new LendingPoolClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current LendingPool app
   */
  state = {
    /**
     * Methods to access global state for the current LendingPool app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          totalDeposits: result.totalDeposits,
          totalBorrowed: result.totalBorrowed,
          interestRate: result.interestRate,
          poolOwner: result.poolOwner,
        }
      },
      /**
       * Get the current value of the totalDeposits key in global state
       */
      totalDeposits: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalDeposits")) as bigint | undefined },
      /**
       * Get the current value of the totalBorrowed key in global state
       */
      totalBorrowed: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalBorrowed")) as bigint | undefined },
      /**
       * Get the current value of the interestRate key in global state
       */
      interestRate: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("interestRate")) as bigint | undefined },
      /**
       * Get the current value of the poolOwner key in global state
       */
      poolOwner: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("poolOwner")) as string | undefined },
    },
    /**
     * Methods to access local state for the current LendingPool app
     */
    local: (address: string | Address) => {
      const encodedAddress = typeof address === 'string' ? address : encodeAddress(address.publicKey)
      return {
        /**
         * Get all current keyed values from local state
         */
        getAll: async (): Promise<Partial<Expand<LocalKeysState>>> => {
          const result = await this.appClient.state.local(encodedAddress).getAll()
          return {
            userDeposits: result.userDeposits,
            userBorrowed: result.userBorrowed,
            lastUpdateTime: result.lastUpdateTime,
          }
        },
        /**
         * Get the current value of the userDeposits key in local state
         */
        userDeposits: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("userDeposits")) as bigint | undefined },
        /**
         * Get the current value of the userBorrowed key in local state
         */
        userBorrowed: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("userBorrowed")) as bigint | undefined },
        /**
         * Get the current value of the lastUpdateTime key in local state
         */
        lastUpdateTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.local(encodedAddress).getValue("lastUpdateTime")) as bigint | undefined },
      }
    },
  }

  public newGroup(): LendingPoolComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a deposit(uint64)void method call against the LendingPool contract
       */
      deposit(params: CallParams<LendingPoolArgs['obj']['deposit(uint64)void'] | LendingPoolArgs['tuple']['deposit(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deposit(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdraw(uint64)void method call against the LendingPool contract
       */
      withdraw(params: CallParams<LendingPoolArgs['obj']['withdraw(uint64)void'] | LendingPoolArgs['tuple']['withdraw(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdraw(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a borrow(uint64)void method call against the LendingPool contract
       */
      borrow(params: CallParams<LendingPoolArgs['obj']['borrow(uint64)void'] | LendingPoolArgs['tuple']['borrow(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.borrow(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a repay()void method call against the LendingPool contract
       */
      repay(params: CallParams<LendingPoolArgs['obj']['repay()void'] | LendingPoolArgs['tuple']['repay()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.repay(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getPoolStats()(uint64,uint64,uint64,uint64) method call against the LendingPool contract
       */
      getPoolStats(params: CallParams<LendingPoolArgs['obj']['getPoolStats()(uint64,uint64,uint64,uint64)'] | LendingPoolArgs['tuple']['getPoolStats()(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolStats()(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a getUserPosition()(uint64,uint64,uint64) method call against the LendingPool contract
       */
      getUserPosition(params: CallParams<LendingPoolArgs['obj']['getUserPosition()(uint64,uint64,uint64)'] | LendingPoolArgs['tuple']['getUserPosition()(uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserPosition(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserPosition()(uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a clear state call to the LendingPool contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as LendingPoolComposer
  }
}
export type LendingPoolComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the deposit(uint64)void ABI method.
   *
   * Deposit ALGO into the lending pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deposit(params?: CallParams<LendingPoolArgs['obj']['deposit(uint64)void'] | LendingPoolArgs['tuple']['deposit(uint64)void']>): LendingPoolComposer<[...TReturns, LendingPoolReturns['deposit(uint64)void'] | undefined]>

  /**
   * Calls the withdraw(uint64)void ABI method.
   *
   * Withdraw ALGO from the lending pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(params?: CallParams<LendingPoolArgs['obj']['withdraw(uint64)void'] | LendingPoolArgs['tuple']['withdraw(uint64)void']>): LendingPoolComposer<[...TReturns, LendingPoolReturns['withdraw(uint64)void'] | undefined]>

  /**
   * Calls the borrow(uint64)void ABI method.
   *
   * Borrow ALGO from the lending pool
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  borrow(params?: CallParams<LendingPoolArgs['obj']['borrow(uint64)void'] | LendingPoolArgs['tuple']['borrow(uint64)void']>): LendingPoolComposer<[...TReturns, LendingPoolReturns['borrow(uint64)void'] | undefined]>

  /**
   * Calls the repay()void ABI method.
   *
   * Repay borrowed ALGO
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  repay(params?: CallParams<LendingPoolArgs['obj']['repay()void'] | LendingPoolArgs['tuple']['repay()void']>): LendingPoolComposer<[...TReturns, LendingPoolReturns['repay()void'] | undefined]>

  /**
   * Calls the getPoolStats()(uint64,uint64,uint64,uint64) ABI method.
   *
   * Get pool statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolStats(params?: CallParams<LendingPoolArgs['obj']['getPoolStats()(uint64,uint64,uint64,uint64)'] | LendingPoolArgs['tuple']['getPoolStats()(uint64,uint64,uint64,uint64)']>): LendingPoolComposer<[...TReturns, LendingPoolReturns['getPoolStats()(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the getUserPosition()(uint64,uint64,uint64) ABI method.
   *
   * Get user position
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserPosition(params?: CallParams<LendingPoolArgs['obj']['getUserPosition()(uint64,uint64,uint64)'] | LendingPoolArgs['tuple']['getUserPosition()(uint64,uint64,uint64)']>): LendingPoolComposer<[...TReturns, LendingPoolReturns['getUserPosition()(uint64,uint64,uint64)'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the LendingPool smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): LendingPoolComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): LendingPoolComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<LendingPoolComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<LendingPoolComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<LendingPoolComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<LendingPoolComposerResults<TReturns>>
}
export type LendingPoolComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

