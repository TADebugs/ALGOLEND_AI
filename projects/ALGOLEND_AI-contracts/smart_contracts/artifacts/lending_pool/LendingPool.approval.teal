#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "totalDeposits" "totalBorrowed" "userDeposits" "lastUpdateTime" "userBorrowed" "interestRate" 0x151f7c75
    // smart_contracts/lending_pool/contract.algo.ts:4
    // export class LendingPool extends Contract {
    txn NumAppArgs
    bz main_after_if_else@13
    pushbytess 0xcd19f1a6 0x6e2ebc9b 0x21f1ddff 0xdbd7b9dd 0x4bcc098e 0x5877bdb1 0x8ceea214 // method "createApplication(address,uint64)void", method "deposit(uint64)void", method "withdraw(uint64)void", method "borrow(uint64)void", method "repay()void", method "getPoolStats()(uint64,uint64,uint64,uint64)", method "getUserPosition()(uint64,uint64,uint64)"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_deposit_route@4 main_withdraw_route@5 main_borrow_route@6 main_repay_route@7 main_getPoolStats_route@8 main_getUserPosition_route@9

main_after_if_else@13:
    // smart_contracts/lending_pool/contract.algo.ts:4
    // export class LendingPool extends Contract {
    intc_0 // 0
    return

main_getUserPosition_route@9:
    // smart_contracts/lending_pool/contract.algo.ts:138
    // getUserPosition(): [uint64, uint64, uint64] {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getUserPosition
    uncover 2
    itob
    uncover 2
    itob
    uncover 2
    itob
    cover 2
    concat
    swap
    concat
    bytec 6 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_getPoolStats_route@8:
    // smart_contracts/lending_pool/contract.algo.ts:122
    // getPoolStats(): [uint64, uint64, uint64, uint64] {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getPoolStats
    uncover 3
    itob
    uncover 3
    itob
    uncover 3
    itob
    uncover 3
    itob
    uncover 3
    uncover 3
    concat
    uncover 2
    concat
    swap
    concat
    bytec 6 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_repay_route@7:
    // smart_contracts/lending_pool/contract.algo.ts:91
    // repay(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub repay
    intc_1 // 1
    return

main_borrow_route@6:
    // smart_contracts/lending_pool/contract.algo.ts:67
    // borrow(amount: uint64): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/lending_pool/contract.algo.ts:4
    // export class LendingPool extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/lending_pool/contract.algo.ts:67
    // borrow(amount: uint64): void {
    callsub borrow
    intc_1 // 1
    return

main_withdraw_route@5:
    // smart_contracts/lending_pool/contract.algo.ts:44
    // withdraw(amount: uint64): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/lending_pool/contract.algo.ts:4
    // export class LendingPool extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/lending_pool/contract.algo.ts:44
    // withdraw(amount: uint64): void {
    callsub withdraw
    intc_1 // 1
    return

main_deposit_route@4:
    // smart_contracts/lending_pool/contract.algo.ts:29
    // deposit(amount: uint64): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/lending_pool/contract.algo.ts:4
    // export class LendingPool extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/lending_pool/contract.algo.ts:29
    // deposit(amount: uint64): void {
    callsub deposit
    intc_1 // 1
    return

main_createApplication_route@3:
    // smart_contracts/lending_pool/contract.algo.ts:19
    // createApplication(owner: Address, initialRate: uint64): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/lending_pool/contract.algo.ts:4
    // export class LendingPool extends Contract {
    txna ApplicationArgs 1
    txna ApplicationArgs 2
    btoi
    // smart_contracts/lending_pool/contract.algo.ts:19
    // createApplication(owner: Address, initialRate: uint64): void {
    callsub createApplication
    intc_1 // 1
    return


// smart_contracts/lending_pool/contract.algo.ts::LendingPool.createApplication(owner: bytes, initialRate: uint64) -> void:
createApplication:
    // smart_contracts/lending_pool/contract.algo.ts:19
    // createApplication(owner: Address, initialRate: uint64): void {
    proto 2 0
    // smart_contracts/lending_pool/contract.algo.ts:9
    // poolOwner = GlobalState<Address>()
    pushbytes "poolOwner"
    // smart_contracts/lending_pool/contract.algo.ts:20
    // this.poolOwner.value = owner
    frame_dig -2
    app_global_put
    // smart_contracts/lending_pool/contract.algo.ts:8
    // interestRate = GlobalState<uint64>() // Basis points (e.g., 500 = 5%)
    bytec 5 // "interestRate"
    // smart_contracts/lending_pool/contract.algo.ts:21
    // this.interestRate.value = initialRate
    frame_dig -1
    app_global_put
    // smart_contracts/lending_pool/contract.algo.ts:6
    // totalDeposits = GlobalState<uint64>()
    bytec_0 // "totalDeposits"
    // smart_contracts/lending_pool/contract.algo.ts:22
    // this.totalDeposits.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/lending_pool/contract.algo.ts:7
    // totalBorrowed = GlobalState<uint64>()
    bytec_1 // "totalBorrowed"
    // smart_contracts/lending_pool/contract.algo.ts:23
    // this.totalBorrowed.value = 0
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts/lending_pool/contract.algo.ts::LendingPool.deposit(amount: uint64) -> void:
deposit:
    // smart_contracts/lending_pool/contract.algo.ts:29
    // deposit(amount: uint64): void {
    proto 1 0
    // smart_contracts/lending_pool/contract.algo.ts:31
    // assert(amount > 0)
    frame_dig -1
    assert
    // smart_contracts/lending_pool/contract.algo.ts:34
    // this.userDeposits(Txn.sender).value = this.userDeposits(Txn.sender).value + amount
    txn Sender
    intc_0 // 0
    // smart_contracts/lending_pool/contract.algo.ts:12
    // userDeposits = LocalState<uint64>()
    bytec_2 // "userDeposits"
    // smart_contracts/lending_pool/contract.algo.ts:34
    // this.userDeposits(Txn.sender).value = this.userDeposits(Txn.sender).value + amount
    app_local_get_ex
    assert // check LocalState exists
    txn Sender
    swap
    frame_dig -1
    +
    // smart_contracts/lending_pool/contract.algo.ts:12
    // userDeposits = LocalState<uint64>()
    bytec_2 // "userDeposits"
    // smart_contracts/lending_pool/contract.algo.ts:34
    // this.userDeposits(Txn.sender).value = this.userDeposits(Txn.sender).value + amount
    swap
    app_local_put
    // smart_contracts/lending_pool/contract.algo.ts:35
    // this.lastUpdateTime(Txn.sender).value = Global.latestTimestamp
    txn Sender
    // smart_contracts/lending_pool/contract.algo.ts:14
    // lastUpdateTime = LocalState<uint64>()
    bytec_3 // "lastUpdateTime"
    // smart_contracts/lending_pool/contract.algo.ts:35
    // this.lastUpdateTime(Txn.sender).value = Global.latestTimestamp
    global LatestTimestamp
    app_local_put
    // smart_contracts/lending_pool/contract.algo.ts:6
    // totalDeposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_0 // "totalDeposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/lending_pool/contract.algo.ts:38
    // this.totalDeposits.value = this.totalDeposits.value + amount
    frame_dig -1
    +
    // smart_contracts/lending_pool/contract.algo.ts:6
    // totalDeposits = GlobalState<uint64>()
    bytec_0 // "totalDeposits"
    // smart_contracts/lending_pool/contract.algo.ts:38
    // this.totalDeposits.value = this.totalDeposits.value + amount
    swap
    app_global_put
    retsub


// smart_contracts/lending_pool/contract.algo.ts::LendingPool.withdraw(amount: uint64) -> void:
withdraw:
    // smart_contracts/lending_pool/contract.algo.ts:44
    // withdraw(amount: uint64): void {
    proto 1 0
    // smart_contracts/lending_pool/contract.algo.ts:45
    // assert(amount > 0)
    frame_dig -1
    assert
    // smart_contracts/lending_pool/contract.algo.ts:46
    // assert(this.userDeposits(Txn.sender).value >= amount)
    txn Sender
    intc_0 // 0
    // smart_contracts/lending_pool/contract.algo.ts:12
    // userDeposits = LocalState<uint64>()
    bytec_2 // "userDeposits"
    // smart_contracts/lending_pool/contract.algo.ts:46
    // assert(this.userDeposits(Txn.sender).value >= amount)
    app_local_get_ex
    assert // check LocalState exists
    frame_dig -1
    >=
    assert
    // smart_contracts/lending_pool/contract.algo.ts:49
    // const timeElapsed: uint64 = Global.latestTimestamp - this.lastUpdateTime(Txn.sender).value
    global LatestTimestamp
    txn Sender
    intc_0 // 0
    // smart_contracts/lending_pool/contract.algo.ts:14
    // lastUpdateTime = LocalState<uint64>()
    bytec_3 // "lastUpdateTime"
    // smart_contracts/lending_pool/contract.algo.ts:49
    // const timeElapsed: uint64 = Global.latestTimestamp - this.lastUpdateTime(Txn.sender).value
    app_local_get_ex
    assert // check LocalState exists
    -
    // smart_contracts/lending_pool/contract.algo.ts:50
    // const interestEarned: uint64 = this.calculateInterest(this.userDeposits(Txn.sender).value, timeElapsed)
    txn Sender
    intc_0 // 0
    // smart_contracts/lending_pool/contract.algo.ts:12
    // userDeposits = LocalState<uint64>()
    bytec_2 // "userDeposits"
    // smart_contracts/lending_pool/contract.algo.ts:50
    // const interestEarned: uint64 = this.calculateInterest(this.userDeposits(Txn.sender).value, timeElapsed)
    app_local_get_ex
    assert // check LocalState exists
    swap
    callsub calculateInterest
    // smart_contracts/lending_pool/contract.algo.ts:53
    // this.userDeposits(Txn.sender).value = this.userDeposits(Txn.sender).value - amount
    txn Sender
    intc_0 // 0
    // smart_contracts/lending_pool/contract.algo.ts:12
    // userDeposits = LocalState<uint64>()
    bytec_2 // "userDeposits"
    // smart_contracts/lending_pool/contract.algo.ts:53
    // this.userDeposits(Txn.sender).value = this.userDeposits(Txn.sender).value - amount
    app_local_get_ex
    assert // check LocalState exists
    txn Sender
    swap
    frame_dig -1
    -
    // smart_contracts/lending_pool/contract.algo.ts:12
    // userDeposits = LocalState<uint64>()
    bytec_2 // "userDeposits"
    // smart_contracts/lending_pool/contract.algo.ts:53
    // this.userDeposits(Txn.sender).value = this.userDeposits(Txn.sender).value - amount
    swap
    app_local_put
    // smart_contracts/lending_pool/contract.algo.ts:6
    // totalDeposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_0 // "totalDeposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/lending_pool/contract.algo.ts:54
    // this.totalDeposits.value = this.totalDeposits.value - amount
    frame_dig -1
    -
    // smart_contracts/lending_pool/contract.algo.ts:6
    // totalDeposits = GlobalState<uint64>()
    bytec_0 // "totalDeposits"
    // smart_contracts/lending_pool/contract.algo.ts:54
    // this.totalDeposits.value = this.totalDeposits.value - amount
    swap
    app_global_put
    // smart_contracts/lending_pool/contract.algo.ts:55
    // this.lastUpdateTime(Txn.sender).value = Global.latestTimestamp
    txn Sender
    // smart_contracts/lending_pool/contract.algo.ts:14
    // lastUpdateTime = LocalState<uint64>()
    bytec_3 // "lastUpdateTime"
    // smart_contracts/lending_pool/contract.algo.ts:55
    // this.lastUpdateTime(Txn.sender).value = Global.latestTimestamp
    global LatestTimestamp
    app_local_put
    // smart_contracts/lending_pool/contract.algo.ts:58-61
    // itxn.payment({
    //   receiver: Txn.sender,
    //   amount: amount + interestEarned,
    // }).submit()
    itxn_begin
    // smart_contracts/lending_pool/contract.algo.ts:59
    // receiver: Txn.sender,
    txn Sender
    // smart_contracts/lending_pool/contract.algo.ts:60
    // amount: amount + interestEarned,
    frame_dig -1
    uncover 2
    +
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/lending_pool/contract.algo.ts:58-61
    // itxn.payment({
    //   receiver: Txn.sender,
    //   amount: amount + interestEarned,
    // }).submit()
    intc_1 // 1
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    retsub


// smart_contracts/lending_pool/contract.algo.ts::LendingPool.borrow(amount: uint64) -> void:
borrow:
    // smart_contracts/lending_pool/contract.algo.ts:67
    // borrow(amount: uint64): void {
    proto 1 0
    // smart_contracts/lending_pool/contract.algo.ts:68
    // assert(amount > 0)
    frame_dig -1
    assert
    // smart_contracts/lending_pool/contract.algo.ts:6
    // totalDeposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_0 // "totalDeposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/lending_pool/contract.algo.ts:7
    // totalBorrowed = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "totalBorrowed"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/lending_pool/contract.algo.ts:72
    // assert(this.totalDeposits.value >= this.totalBorrowed.value + amount)
    frame_dig -1
    +
    >=
    assert
    // smart_contracts/lending_pool/contract.algo.ts:75
    // this.userBorrowed(Txn.sender).value = this.userBorrowed(Txn.sender).value + amount
    txn Sender
    intc_0 // 0
    // smart_contracts/lending_pool/contract.algo.ts:13
    // userBorrowed = LocalState<uint64>()
    bytec 4 // "userBorrowed"
    // smart_contracts/lending_pool/contract.algo.ts:75
    // this.userBorrowed(Txn.sender).value = this.userBorrowed(Txn.sender).value + amount
    app_local_get_ex
    assert // check LocalState exists
    txn Sender
    swap
    frame_dig -1
    +
    // smart_contracts/lending_pool/contract.algo.ts:13
    // userBorrowed = LocalState<uint64>()
    bytec 4 // "userBorrowed"
    // smart_contracts/lending_pool/contract.algo.ts:75
    // this.userBorrowed(Txn.sender).value = this.userBorrowed(Txn.sender).value + amount
    swap
    app_local_put
    // smart_contracts/lending_pool/contract.algo.ts:76
    // this.lastUpdateTime(Txn.sender).value = Global.latestTimestamp
    txn Sender
    // smart_contracts/lending_pool/contract.algo.ts:14
    // lastUpdateTime = LocalState<uint64>()
    bytec_3 // "lastUpdateTime"
    // smart_contracts/lending_pool/contract.algo.ts:76
    // this.lastUpdateTime(Txn.sender).value = Global.latestTimestamp
    global LatestTimestamp
    app_local_put
    // smart_contracts/lending_pool/contract.algo.ts:7
    // totalBorrowed = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "totalBorrowed"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/lending_pool/contract.algo.ts:79
    // this.totalBorrowed.value = this.totalBorrowed.value + amount
    frame_dig -1
    +
    // smart_contracts/lending_pool/contract.algo.ts:7
    // totalBorrowed = GlobalState<uint64>()
    bytec_1 // "totalBorrowed"
    // smart_contracts/lending_pool/contract.algo.ts:79
    // this.totalBorrowed.value = this.totalBorrowed.value + amount
    swap
    app_global_put
    // smart_contracts/lending_pool/contract.algo.ts:82-85
    // itxn.payment({
    //   receiver: Txn.sender,
    //   amount: amount,
    // }).submit()
    itxn_begin
    // smart_contracts/lending_pool/contract.algo.ts:83
    // receiver: Txn.sender,
    txn Sender
    frame_dig -1
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/lending_pool/contract.algo.ts:82-85
    // itxn.payment({
    //   receiver: Txn.sender,
    //   amount: amount,
    // }).submit()
    intc_1 // 1
    itxn_field TypeEnum
    intc_0 // 0
    itxn_field Fee
    itxn_submit
    retsub


// smart_contracts/lending_pool/contract.algo.ts::LendingPool.repay() -> void:
repay:
    // smart_contracts/lending_pool/contract.algo.ts:93
    // assert(this.userBorrowed(Txn.sender).value > 0)
    txn Sender
    intc_0 // 0
    // smart_contracts/lending_pool/contract.algo.ts:13
    // userBorrowed = LocalState<uint64>()
    bytec 4 // "userBorrowed"
    // smart_contracts/lending_pool/contract.algo.ts:93
    // assert(this.userBorrowed(Txn.sender).value > 0)
    app_local_get_ex
    assert // check LocalState exists
    assert
    // smart_contracts/lending_pool/contract.algo.ts:96
    // const timeElapsed: uint64 = Global.latestTimestamp - this.lastUpdateTime(Txn.sender).value
    global LatestTimestamp
    txn Sender
    intc_0 // 0
    // smart_contracts/lending_pool/contract.algo.ts:14
    // lastUpdateTime = LocalState<uint64>()
    bytec_3 // "lastUpdateTime"
    // smart_contracts/lending_pool/contract.algo.ts:96
    // const timeElapsed: uint64 = Global.latestTimestamp - this.lastUpdateTime(Txn.sender).value
    app_local_get_ex
    assert // check LocalState exists
    -
    // smart_contracts/lending_pool/contract.algo.ts:97
    // const interestOwed: uint64 = this.calculateInterest(this.userBorrowed(Txn.sender).value, timeElapsed)
    txn Sender
    intc_0 // 0
    // smart_contracts/lending_pool/contract.algo.ts:13
    // userBorrowed = LocalState<uint64>()
    bytec 4 // "userBorrowed"
    // smart_contracts/lending_pool/contract.algo.ts:97
    // const interestOwed: uint64 = this.calculateInterest(this.userBorrowed(Txn.sender).value, timeElapsed)
    app_local_get_ex
    assert // check LocalState exists
    swap
    callsub calculateInterest
    // smart_contracts/lending_pool/contract.algo.ts:98
    // const totalOwed: uint64 = this.userBorrowed(Txn.sender).value + interestOwed
    txn Sender
    intc_0 // 0
    // smart_contracts/lending_pool/contract.algo.ts:13
    // userBorrowed = LocalState<uint64>()
    bytec 4 // "userBorrowed"
    // smart_contracts/lending_pool/contract.algo.ts:98
    // const totalOwed: uint64 = this.userBorrowed(Txn.sender).value + interestOwed
    app_local_get_ex
    assert // check LocalState exists
    dig 1
    +
    // smart_contracts/lending_pool/contract.algo.ts:101
    // this.userBorrowed(Txn.sender).value = 0
    txn Sender
    // smart_contracts/lending_pool/contract.algo.ts:13
    // userBorrowed = LocalState<uint64>()
    bytec 4 // "userBorrowed"
    // smart_contracts/lending_pool/contract.algo.ts:101
    // this.userBorrowed(Txn.sender).value = 0
    intc_0 // 0
    app_local_put
    // smart_contracts/lending_pool/contract.algo.ts:7
    // totalBorrowed = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "totalBorrowed"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/lending_pool/contract.algo.ts:102
    // this.totalBorrowed.value = this.totalBorrowed.value - (totalOwed - interestOwed)
    swap
    uncover 2
    -
    -
    // smart_contracts/lending_pool/contract.algo.ts:7
    // totalBorrowed = GlobalState<uint64>()
    bytec_1 // "totalBorrowed"
    // smart_contracts/lending_pool/contract.algo.ts:102
    // this.totalBorrowed.value = this.totalBorrowed.value - (totalOwed - interestOwed)
    swap
    app_global_put
    // smart_contracts/lending_pool/contract.algo.ts:103
    // this.lastUpdateTime(Txn.sender).value = Global.latestTimestamp
    txn Sender
    // smart_contracts/lending_pool/contract.algo.ts:14
    // lastUpdateTime = LocalState<uint64>()
    bytec_3 // "lastUpdateTime"
    // smart_contracts/lending_pool/contract.algo.ts:103
    // this.lastUpdateTime(Txn.sender).value = Global.latestTimestamp
    global LatestTimestamp
    app_local_put
    retsub


// smart_contracts/lending_pool/contract.algo.ts::LendingPool.calculateInterest(principal: uint64, timeElapsed: uint64) -> uint64:
calculateInterest:
    // smart_contracts/lending_pool/contract.algo.ts:112
    // private calculateInterest(principal: uint64, timeElapsed: uint64): uint64 {
    proto 2 1
    // smart_contracts/lending_pool/contract.algo.ts:8
    // interestRate = GlobalState<uint64>() // Basis points (e.g., 500 = 5%)
    intc_0 // 0
    bytec 5 // "interestRate"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/lending_pool/contract.algo.ts:116
    // return (principal * this.interestRate.value * timeElapsed) / (10000 * annualSeconds)
    frame_dig -2
    *
    frame_dig -1
    *
    pushint 315360000000 // 315360000000
    /
    retsub


// smart_contracts/lending_pool/contract.algo.ts::LendingPool.getPoolStats() -> uint64, uint64, uint64, uint64:
getPoolStats:
    // smart_contracts/lending_pool/contract.algo.ts:6
    // totalDeposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_0 // "totalDeposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/lending_pool/contract.algo.ts:123-125
    // const utilizationRate: uint64 = this.totalDeposits.value > 0
    //   ? (this.totalBorrowed.value * 10000) / this.totalDeposits.value
    //   : 0
    bz getPoolStats_ternary_false@2
    // smart_contracts/lending_pool/contract.algo.ts:7
    // totalBorrowed = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "totalBorrowed"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/lending_pool/contract.algo.ts:124
    // ? (this.totalBorrowed.value * 10000) / this.totalDeposits.value
    pushint 10000 // 10000
    *
    // smart_contracts/lending_pool/contract.algo.ts:6
    // totalDeposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_0 // "totalDeposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/lending_pool/contract.algo.ts:124
    // ? (this.totalBorrowed.value * 10000) / this.totalDeposits.value
    /

getPoolStats_ternary_merge@3:
    // smart_contracts/lending_pool/contract.algo.ts:6
    // totalDeposits = GlobalState<uint64>()
    intc_0 // 0
    bytec_0 // "totalDeposits"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/lending_pool/contract.algo.ts:7
    // totalBorrowed = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "totalBorrowed"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/lending_pool/contract.algo.ts:8
    // interestRate = GlobalState<uint64>() // Basis points (e.g., 500 = 5%)
    intc_0 // 0
    bytec 5 // "interestRate"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/lending_pool/contract.algo.ts:127-132
    // return [
    //   this.totalDeposits.value,
    //   this.totalBorrowed.value,
    //   this.interestRate.value,
    //   utilizationRate
    // ]
    uncover 3
    retsub

getPoolStats_ternary_false@2:
    // smart_contracts/lending_pool/contract.algo.ts:125
    // : 0
    intc_0 // 0
    b getPoolStats_ternary_merge@3


// smart_contracts/lending_pool/contract.algo.ts::LendingPool.getUserPosition() -> uint64, uint64, uint64:
getUserPosition:
    // smart_contracts/lending_pool/contract.algo.ts:140
    // this.userDeposits(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // smart_contracts/lending_pool/contract.algo.ts:12
    // userDeposits = LocalState<uint64>()
    bytec_2 // "userDeposits"
    // smart_contracts/lending_pool/contract.algo.ts:140
    // this.userDeposits(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // smart_contracts/lending_pool/contract.algo.ts:141
    // this.userBorrowed(Txn.sender).value,
    txn Sender
    intc_0 // 0
    // smart_contracts/lending_pool/contract.algo.ts:13
    // userBorrowed = LocalState<uint64>()
    bytec 4 // "userBorrowed"
    // smart_contracts/lending_pool/contract.algo.ts:141
    // this.userBorrowed(Txn.sender).value,
    app_local_get_ex
    assert // check LocalState exists
    // smart_contracts/lending_pool/contract.algo.ts:142
    // this.lastUpdateTime(Txn.sender).value
    txn Sender
    intc_0 // 0
    // smart_contracts/lending_pool/contract.algo.ts:14
    // lastUpdateTime = LocalState<uint64>()
    bytec_3 // "lastUpdateTime"
    // smart_contracts/lending_pool/contract.algo.ts:142
    // this.lastUpdateTime(Txn.sender).value
    app_local_get_ex
    assert // check LocalState exists
    // smart_contracts/lending_pool/contract.algo.ts:139-143
    // return [
    //   this.userDeposits(Txn.sender).value,
    //   this.userBorrowed(Txn.sender).value,
    //   this.lastUpdateTime(Txn.sender).value
    // ]
    retsub
